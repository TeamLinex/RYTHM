import os
import re
import uuid
import socket
import psutil
import platform

from config import BOT_USERNAME

from program import LOGS
from driver.core import me_bot
from driver.filters import command
from driver.utils import remove_if_exists
from driver.decorators import sudo_users_only, humanbytes

from pyrogram import Client, filters
from pyrogram.types import Message


@Client.on_message(command(["sysinfo", "sysstats", f"sysinfo@{BOT_USERNAME}"]) & ~filters.edited)
@sudo_users_only
async def fetch_system_information(client, message):
    splatform = platform.system()
    platform_release = platform.release()
    platform_version = platform.version()
    architecture = platform.machine()
    hostname = socket.gethostname()
    ip_address = socket.gethostbyname(socket.gethostname())
    mac_address = ":".join(re.findall("..", "%012x" % uuid.getnode()))
    processor = platform.processor()
    ram = humanbytes(round(psutil.virtual_memory().total))
    cpu_freq = psutil.cpu_freq().current
    if cpu_freq >= 1000:
        cpu_freq = f"{round(cpu_freq / 1000, 2)}GHz"
    else:
        cpu_freq = f"{round(cpu_freq, 2)}MHz"
    du = psutil.disk_usage(client.workdir)
    psutil.disk_io_counters()
    disk = f"{humanbytes(du.used)} / {humanbytes(du.total)} " f"({du.percent}%)"
    cpu_len = len(psutil.Process().cpu_affinity())
    somsg = f"""üñ• **s ès·¥õ·¥á·¥ç …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥**
    
**·¥© ü·¥Ä·¥õ“ì·¥è Ä·¥ç :** `{splatform}`
** Ä·¥á ü·¥á·¥Äs·¥á :** `{platform_release}`
**·¥†·¥á Äs…™·¥è…¥ :** `{platform_version}`
**·¥Ä Ä·¥Ñ ú…™·¥õ·¥á·¥Ñ·¥õ·¥ú Ä·¥á :** `{architecture}`
** ú·¥ès·¥õ…¥·¥Ä·¥ç·¥á :** `{hostname}`
**…™·¥© :** `{ip_address}`
**·¥ç·¥Ä·¥Ñ :** `{mac_address}`
**·¥© Ä·¥è·¥Ñ·¥áss·¥è Ä :** `{processor}`
** Ä·¥Ä·¥ç : ** `{ram}`
**·¥Ñ·¥©·¥ú :** `{cpu_len}`
**“ì Ä«´·¥ú·¥á…¥·¥Ñ è :** `{cpu_freq}`
**·¥Ö…™s·¥ã :** `{disk}`

 è·¥è·¥ú ·¥Ä Ä·¥á ·¥õ ú…™…¥·¥ã…™…¥…¢  ú·¥è·¥° ·¥õ ú·¥á ·¥Ñ·¥©·¥ú ·¥ús·¥Ä…¢·¥á …™s s·¥è  ú…™…¢ ú …¥·¥Ä üòÇ, …™ ·¥Ä·¥ç ·¥°·¥Ä·¥õ·¥Ñ ú…™…¥…¢ 4·¥ã ·¥©·¥è*…¥ ·¥Ä…¥·¥Ö  è·¥è·¥ú ·¥Ä Ä·¥á ·¥õ·¥á…¥s·¥á·¥Ö.üòÇ
    """
    
    await message.reply(somsg)


@Client.on_message(command(["logs", "log", f"logs@{BOT_USERNAME}"]) & ~filters.edited)
@sudo_users_only
async def get_bot_logs(c: Client, m: Message):
    bot_log_path = f'streambot-logs-{me_bot.id}.txt'
    if os.path.exists(bot_log_path):
        try:
            await m.reply_document(
                bot_log_path,
                quote=True,
                caption='¬ª  ü·¥è…¢s ·¥è“ì  è·¥è·¥ú Ä  ô·¥è·¥õ',
            )
        except Exception as e:
            remove_if_exists(bot_log_path)
            print(f'[ERROR]: {e}')
    else:
        if not os.path.exists(bot_log_path):
            await m.reply_text('¬ª  ü·¥è…¢s …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö !')
